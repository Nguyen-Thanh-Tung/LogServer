#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('server1:server');
const http = require('http');
const WebSocket = require('ws');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */
let count = 0;
const reportService = require('../services/report-service');
const server = http.createServer(app);
const wss = new WebSocket.Server({ server });
global.wss = wss;
const clientViewList = [];

wss.on('connection', (ws, req) => {
  if (req.url === '/view') {
    clientViewList.push(ws);
    global.ws = clientViewList;
  }
  ws.on('message', (message) => {
    if (req.url === '/') {
      reportService.addReportForServer(message, (responseData) => {
        sendAll(JSON.stringify(responseData));
      });
    }
  });

  ws.on('close', function() {
    clientViewList.splice(clientViewList.indexOf(ws), 1);
  });
  ws.on('error', function() {
    clientViewList.splice(clientViewList.indexOf(ws), 1);
  });
});

function sendAll(message) {
  for (let i = 0; i < clientViewList.length; i += 1) {
    clientViewList[i].send(message);
  }
}
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const portT = parseInt(val, 10);

  if (isNaN(portT)) {
    // named pipe
    return val;
  }

  if (portT >= 0) {
    // port number
    return portT;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}
